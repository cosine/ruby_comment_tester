#!/usr/bin/env ruby
#
# Copyright (c) 2013, Michael H. Buselli
# See LICENSE for details.  All other rights reserved.
#
# ruby_comment_tester works by auto-generating Ruby test-unit files from
# the comments of a Ruby program.  The idea is that you mimic what you
# would type into irb that could provide a test.  In doing so, you write
# both a test and document the behavior of your program or method in the
# same place.  Some example test comments are as follows:

# Code and assertions in the same comment block are grouped into
# a single test.
#
# irb> a = "123"
# irb> b = a.split(/2/)
# => ["1", "3"]
#
# irb> b.map(&:to_i).inject(0) { |s, x| s + x } + 38
# => 42

# Variables are not sticky between tests, and you can also test for
# exceptions or thrown objects with raises=> and throws=>.
#
# irb> a
# raises=> NameError
# irb> throw :catch_me
# throws=> :catch_me

# Sometimes you have to initialize something for your code or tests to
# work.  Use irb-setup> for that.
#
# irb-setup> puts "This runs outside the tests before code or tests are loaded."
# irb> [:hello, :world].map { |s| s.to_s.capitalize }.join(" ")
# => "Hello World"

# You can comment out tests with double hashes of any sort.
#
# # irb> this won't run
# # => foo
## irb> neither does this
## => bar

# You can run the above tests by running this program on itself.

require "pp" if ENV["DEBUG"]

class CommentTester
  class << self
    def run (argv)
      argv.each { |filename| run_one(filename) }
    end

    private

    def run_one (filename)
      eval(make_test_file(filename))
      load(filename) unless filename == $0
    end

    def make_test_file (filename)
      comment_groups = comment_extraction(filename)
      test_file = %'require "test/unit"\nclass CommentTesterTestClass < Test::Unit::TestCase\n'

      test_file << comment_groups.map do |cg|
        comment_group_to_test_case(cg)
      end.join

      (test_file << "end\n").tap { |x| puts x if ENV["DEBUG"] }
    end

    def comment_extraction (filename)
      comment_groups = []
      last_line = :code
      # or :comment, :test_setup, :test_code, :assertion, :assert_raise, :assert_throw

      # Read the Ruby code file.
      File.open(filename, "r") do |fh|
        fh.each_line do |line|
          if line =~ /\A\s*#/
            if last_line == :code
              comment_groups << []
            end

            if line =~ /\A\s*#\s*irb-setup>\s*(.*)\Z/
              comment_groups[-1] << {test_setup: $1.chomp}
              last_line = :test_setup
            elsif line =~ /\A\s*#\s*irb>\s*(.*)\Z/
              comment_groups[-1] << {test_code: $1.chomp}
              last_line = :test_code
            elsif line =~ /\A\s*#\s*=>\s*(.*)\Z/
              raise "you can only use => after irb>" if last_line != :test_code
              comment_groups[-1] << {assertion: $1.chomp}
              last_line = :assertion
            elsif line =~ /\A\s*#\s*raises=>\s*(.*)\Z/
              raise "you can only use raises=> after irb>" if last_line != :test_code
              comment_groups[-1][-1][:assert_raise] = $1.chomp
              last_line = :assert_raise
            elsif line =~ /\A\s*#\s*throws=>\s*(.*)\Z/
              raise "you can only use throws=> after irb>" if last_line != :test_code
              comment_groups[-1][-1][:assert_throw] = $1.chomp
              last_line = :assert_throw
            else
              last_line = :comment
            end
          else
            last_line = :code
          end
        end
      end

      comment_groups.reject { |a| a.size == 0 }.tap { |x| pp x if ENV["DEBUG"] }
    end

    def comment_group_to_test_case (comment_group)
      @test_cases_made ||= 0
      @test_cases_made += 1

      test_body = comment_group.map do |comment_line_data|
        raise_code = comment_line_data.delete(:assert_raise)
        throw_code = comment_line_data.delete(:assert_throw)
        line_type = comment_line_data.keys[0]
        code = comment_line_data.values[0]

        if line_type == :test_setup
          Object.class_eval(code)
        elsif line_type == :test_code
          if raise_code
            "assert_raise(#{raise_code}) { #{code} }"
          elsif throw_code
            "assert_throws(#{throw_code}) { #{code} }"
          else
            "@result_for_assertion = #{code}"
          end
        else
          "assert_equal(#{code}, @result_for_assertion)"
        end
      end.join("\n    ")

      "  def test_#{@test_cases_made}\n    #{test_body}\n  end\n"
    end
  end
end

CommentTester.run(ARGV) if __FILE__ == $0
